%%
%% Autogenerated by Thrift Compiler (0.10.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(parquet_types).

-include("parquet_types.hrl").

-export([struct_info/1, struct_info_ext/1, enum_info/1, enum_names/0, struct_names/0, exception_names/0]).

struct_info('Statistics') ->
  {struct, [{1, string},
          {2, string},
          {3, i64},
          {4, i64}]}
;

struct_info('SchemaElement') ->
  {struct, [{1, i32},
          {2, i32},
          {3, i32},
          {4, string},
          {5, i32},
          {6, i32},
          {7, i32},
          {8, i32},
          {9, i32}]}
;

struct_info('DataPageHeader') ->
  {struct, [{1, i32},
          {2, i32},
          {3, i32},
          {4, i32},
          {5, {struct, {'parquet_types', 'Statistics'}}}]}
;

struct_info('IndexPageHeader') ->
  {struct, []}
;

struct_info('DictionaryPageHeader') ->
  {struct, [{1, i32},
          {2, i32},
          {3, bool}]}
;

struct_info('DataPageHeaderV2') ->
  {struct, [{1, i32},
          {2, i32},
          {3, i32},
          {4, i32},
          {5, i32},
          {6, i32},
          {7, bool},
          {8, {struct, {'parquet_types', 'Statistics'}}}]}
;

struct_info('PageHeader') ->
  {struct, [{1, i32},
          {2, i32},
          {3, i32},
          {4, i32},
          {5, {struct, {'parquet_types', 'DataPageHeader'}}},
          {6, {struct, {'parquet_types', 'IndexPageHeader'}}},
          {7, {struct, {'parquet_types', 'DictionaryPageHeader'}}},
          {8, {struct, {'parquet_types', 'DataPageHeaderV2'}}}]}
;

struct_info('KeyValue') ->
  {struct, [{1, string},
          {2, string}]}
;

struct_info('SortingColumn') ->
  {struct, [{1, i32},
          {2, bool},
          {3, bool}]}
;

struct_info('PageEncodingStats') ->
  {struct, [{1, i32},
          {2, i32},
          {3, i32}]}
;

struct_info('ColumnMetaData') ->
  {struct, [{1, i32},
          {2, {list, i32}},
          {3, {list, string}},
          {4, i32},
          {5, i64},
          {6, i64},
          {7, i64},
          {8, {list, {struct, {'parquet_types', 'KeyValue'}}}},
          {9, i64},
          {10, i64},
          {11, i64},
          {12, {struct, {'parquet_types', 'Statistics'}}},
          {13, {list, {struct, {'parquet_types', 'PageEncodingStats'}}}}]}
;

struct_info('ColumnChunk') ->
  {struct, [{1, string},
          {2, i64},
          {3, {struct, {'parquet_types', 'ColumnMetaData'}}}]}
;

struct_info('RowGroup') ->
  {struct, [{1, {list, {struct, {'parquet_types', 'ColumnChunk'}}}},
          {2, i64},
          {3, i64},
          {4, {list, {struct, {'parquet_types', 'SortingColumn'}}}}]}
;

struct_info('FileMetaData') ->
  {struct, [{1, i32},
          {2, {list, {struct, {'parquet_types', 'SchemaElement'}}}},
          {3, i64},
          {4, {list, {struct, {'parquet_types', 'RowGroup'}}}},
          {5, {list, {struct, {'parquet_types', 'KeyValue'}}}},
          {6, string}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('Statistics') ->
  {struct, [{1, optional, string, 'max', undefined},
          {2, optional, string, 'min', undefined},
          {3, optional, i64, 'null_count', undefined},
          {4, optional, i64, 'distinct_count', undefined}]}
;

struct_info_ext('SchemaElement') ->
  {struct, [{1, optional, i32, 'type', undefined},
          {2, optional, i32, 'type_length', undefined},
          {3, optional, i32, 'repetition_type', undefined},
          {4, required, string, 'name', undefined},
          {5, optional, i32, 'num_children', undefined},
          {6, optional, i32, 'converted_type', undefined},
          {7, optional, i32, 'scale', undefined},
          {8, optional, i32, 'precision', undefined},
          {9, optional, i32, 'field_id', undefined}]}
;

struct_info_ext('DataPageHeader') ->
  {struct, [{1, required, i32, 'num_values', undefined},
          {2, required, i32, 'encoding', undefined},
          {3, required, i32, 'definition_level_encoding', undefined},
          {4, required, i32, 'repetition_level_encoding', undefined},
          {5, optional, {struct, {'parquet_types', 'Statistics'}}, 'statistics', #'Statistics'{}}]}
;

struct_info_ext('IndexPageHeader') ->
  {struct, []}
;

struct_info_ext('DictionaryPageHeader') ->
  {struct, [{1, required, i32, 'num_values', undefined},
          {2, required, i32, 'encoding', undefined},
          {3, optional, bool, 'is_sorted', undefined}]}
;

struct_info_ext('DataPageHeaderV2') ->
  {struct, [{1, required, i32, 'num_values', undefined},
          {2, required, i32, 'num_nulls', undefined},
          {3, required, i32, 'num_rows', undefined},
          {4, required, i32, 'encoding', undefined},
          {5, required, i32, 'definition_levels_byte_length', undefined},
          {6, required, i32, 'repetition_levels_byte_length', undefined},
          {7, optional, bool, 'is_compressed', true},
          {8, optional, {struct, {'parquet_types', 'Statistics'}}, 'statistics', #'Statistics'{}}]}
;

struct_info_ext('PageHeader') ->
  {struct, [{1, required, i32, 'type', undefined},
          {2, required, i32, 'uncompressed_page_size', undefined},
          {3, required, i32, 'compressed_page_size', undefined},
          {4, optional, i32, 'crc', undefined},
          {5, optional, {struct, {'parquet_types', 'DataPageHeader'}}, 'data_page_header', #'DataPageHeader'{}},
          {6, optional, {struct, {'parquet_types', 'IndexPageHeader'}}, 'index_page_header', #'IndexPageHeader'{}},
          {7, optional, {struct, {'parquet_types', 'DictionaryPageHeader'}}, 'dictionary_page_header', #'DictionaryPageHeader'{}},
          {8, optional, {struct, {'parquet_types', 'DataPageHeaderV2'}}, 'data_page_header_v2', #'DataPageHeaderV2'{}}]}
;

struct_info_ext('KeyValue') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, optional, string, 'value', undefined}]}
;

struct_info_ext('SortingColumn') ->
  {struct, [{1, required, i32, 'column_idx', undefined},
          {2, required, bool, 'descending', undefined},
          {3, required, bool, 'nulls_first', undefined}]}
;

struct_info_ext('PageEncodingStats') ->
  {struct, [{1, required, i32, 'page_type', undefined},
          {2, required, i32, 'encoding', undefined},
          {3, required, i32, 'count', undefined}]}
;

struct_info_ext('ColumnMetaData') ->
  {struct, [{1, required, i32, 'type', undefined},
          {2, required, {list, i32}, 'encodings', []},
          {3, required, {list, string}, 'path_in_schema', []},
          {4, required, i32, 'codec', undefined},
          {5, required, i64, 'num_values', undefined},
          {6, required, i64, 'total_uncompressed_size', undefined},
          {7, required, i64, 'total_compressed_size', undefined},
          {8, optional, {list, {struct, {'parquet_types', 'KeyValue'}}}, 'key_value_metadata', []},
          {9, required, i64, 'data_page_offset', undefined},
          {10, optional, i64, 'index_page_offset', undefined},
          {11, optional, i64, 'dictionary_page_offset', undefined},
          {12, optional, {struct, {'parquet_types', 'Statistics'}}, 'statistics', #'Statistics'{}},
          {13, optional, {list, {struct, {'parquet_types', 'PageEncodingStats'}}}, 'encoding_stats', []}]}
;

struct_info_ext('ColumnChunk') ->
  {struct, [{1, optional, string, 'file_path', undefined},
          {2, required, i64, 'file_offset', undefined},
          {3, optional, {struct, {'parquet_types', 'ColumnMetaData'}}, 'meta_data', #'ColumnMetaData'{}}]}
;

struct_info_ext('RowGroup') ->
  {struct, [{1, required, {list, {struct, {'parquet_types', 'ColumnChunk'}}}, 'columns', []},
          {2, required, i64, 'total_byte_size', undefined},
          {3, required, i64, 'num_rows', undefined},
          {4, optional, {list, {struct, {'parquet_types', 'SortingColumn'}}}, 'sorting_columns', []}]}
;

struct_info_ext('FileMetaData') ->
  {struct, [{1, required, i32, 'version', undefined},
          {2, required, {list, {struct, {'parquet_types', 'SchemaElement'}}}, 'schema', []},
          {3, required, i64, 'num_rows', undefined},
          {4, required, {list, {struct, {'parquet_types', 'RowGroup'}}}, 'row_groups', []},
          {5, optional, {list, {struct, {'parquet_types', 'KeyValue'}}}, 'key_value_metadata', []},
          {6, optional, string, 'created_by', undefined}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

struct_names() ->
  ['Statistics', 'SchemaElement', 'DataPageHeader', 'IndexPageHeader', 'DictionaryPageHeader', 'DataPageHeaderV2', 'PageHeader', 'KeyValue', 'SortingColumn', 'PageEncodingStats', 'ColumnMetaData', 'ColumnChunk', 'RowGroup', 'FileMetaData'].

enum_info('Type') ->
  [
    {'BOOLEAN', 0},
    {'INT32', 1},
    {'INT64', 2},
    {'INT96', 3},
    {'FLOAT', 4},
    {'DOUBLE', 5},
    {'BYTE_ARRAY', 6},
    {'FIXED_LEN_BYTE_ARRAY', 7}
  ];

enum_info('ConvertedType') ->
  [
    {'UTF8', 0},
    {'MAP', 1},
    {'MAP_KEY_VALUE', 2},
    {'LIST', 3},
    {'ENUM', 4},
    {'DECIMAL', 5},
    {'DATE', 6},
    {'TIME_MILLIS', 7},
    {'TIME_MICROS', 8},
    {'TIMESTAMP_MILLIS', 9},
    {'TIMESTAMP_MICROS', 10},
    {'UINT_8', 11},
    {'UINT_16', 12},
    {'UINT_32', 13},
    {'UINT_64', 14},
    {'INT_8', 15},
    {'INT_16', 16},
    {'INT_32', 17},
    {'INT_64', 18},
    {'JSON', 19},
    {'BSON', 20},
    {'INTERVAL', 21}
  ];

enum_info('FieldRepetitionType') ->
  [
    {'REQUIRED', 0},
    {'OPTIONAL', 1},
    {'REPEATED', 2}
  ];

enum_info('Encoding') ->
  [
    {'PLAIN', 0},
    {'PLAIN_DICTIONARY', 2},
    {'RLE', 3},
    {'BIT_PACKED', 4},
    {'DELTA_BINARY_PACKED', 5},
    {'DELTA_LENGTH_BYTE_ARRAY', 6},
    {'DELTA_BYTE_ARRAY', 7},
    {'RLE_DICTIONARY', 8}
  ];

enum_info('CompressionCodec') ->
  [
    {'UNCOMPRESSED', 0},
    {'SNAPPY', 1},
    {'GZIP', 2},
    {'LZO', 3}
  ];

enum_info('PageType') ->
  [
    {'DATA_PAGE', 0},
    {'INDEX_PAGE', 1},
    {'DICTIONARY_PAGE', 2},
    {'DATA_PAGE_V2', 3}
  ];

enum_info(_) -> erlang:error(function_clause).

enum_names() ->
  ['Type', 'ConvertedType', 'FieldRepetitionType', 'Encoding', 'CompressionCodec', 'PageType'].

exception_names() ->
  [].

